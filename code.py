{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 858
        },
        "id": "-XneTClaEgK8",
        "outputId": "dc2d0e3f-5661-495a-ca8b-0c53fd2b0eb5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Device: cpu\n",
            "Encoder loaded.\n",
            "DQN loaded.\n",
            "Bi-LSTM: loaded\n",
            "\n",
            "Loaded F02-01_logs.las | mapped: {'MD': '✓', 'TVD': '—', 'GR': '✓', 'ROP': '—', 'WOB': '—', 'Torque': '—', 'RPM': '—', 'Pressure': '—', 'Flow': '—', 'Inclination': '—', 'Azimuth': '—', 'Resistivity': '—', 'Density': '✓', 'Neutron': '—'}\n",
            "📄 wrote per-window CSV → /content/drive/MyDrive/Geo/trained_models/f3_contact_F02-01_logs.csv\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "🧾 wrote per-well JSON → /content/drive/MyDrive/Geo/trained_models/f3_json_F02-01_logs.json\n",
            "Risk (p50/p90): 7.3 / 49.4 · Contact % (final): 19.6% · Plan overlay: no\n",
            "\n",
            "=== Aggregate across wells (window-level) ===\n",
            "{'outside': 3609, 'in_zone': 1865, 'approaching_exit': 2687, 'exiting': 1368}\n",
            "🗂️  wrote index JSON → /content/drive/MyDrive/Geo/trained_models/f3_all_outputs.json\n"
          ]
        }
      ],
      "source": [
        "# =============================\n",
        "# F3 \"All-wells\" Dashboard  (macOS upload version)\n",
        "# =============================\n",
        "\n",
        "import os, re, glob, json, math, warnings, datetime, sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from typing import Dict, Tuple, List, Optional\n",
        "\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# ---------- Local Paths (macOS-friendly) ----------\n",
        "# MODEL_DIR: folder with your model files + norm_stats.json\n",
        "# SAVE_DIR:  outputs (CSV/PNG/JSON + index)\n",
        "MODEL_DIR = os.environ.get(\"MODEL_DIR\", os.path.expanduser(\"~/Geo/models\"))\n",
        "SAVE_DIR  = os.environ.get(\"SAVE_DIR\",  os.path.expanduser(\"~/Geo/outputs\"))\n",
        "os.makedirs(MODEL_DIR, exist_ok=True)\n",
        "os.makedirs(SAVE_DIR,  exist_ok=True)\n",
        "\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "print(\"Device:\", device)\n",
        "print(\"MODEL_DIR:\", MODEL_DIR)\n",
        "print(\"SAVE_DIR :\", SAVE_DIR)\n",
        "\n",
        "# ---------- Prompt user to select .las files ----------\n",
        "def get_las_paths_from_user() -> List[str]:\n",
        "    \"\"\"\n",
        "    On macOS, opens a native file dialog to pick one or more .las files.\n",
        "    Falls back to terminal input of a file OR directory.\n",
        "    \"\"\"\n",
        "    paths: List[str] = []\n",
        "    try:\n",
        "        import tkinter as tk\n",
        "        from tkinter import filedialog\n",
        "        root = tk.Tk(); root.withdraw()\n",
        "        selected = filedialog.askopenfilenames(\n",
        "            title=\"Select one or more .las files\",\n",
        "            filetypes=[(\"LAS files\", \"*.las\")]\n",
        "        )\n",
        "        paths = list(selected)\n",
        "        if paths:\n",
        "            return paths\n",
        "    except Exception as e:\n",
        "        print(f\"(file dialog not available: {e})\")\n",
        "\n",
        "    # Fallback: terminal prompt\n",
        "    p = input(\"Enter the path to a .las file or a directory containing .las files: \").strip()\n",
        "    if os.path.isdir(p):\n",
        "        paths = glob.glob(os.path.join(p, \"**\", \"*.las\"), recursive=True)\n",
        "    elif os.path.isfile(p) and p.lower().endswith(\".las\"):\n",
        "        paths = [p]\n",
        "    else:\n",
        "        print(\"No valid path provided.\")\n",
        "    return paths\n",
        "\n",
        "# ---------- Feature contract ----------\n",
        "FEATURES = [\"MD\",\"TVD\",\"GR\",\"ROP\",\"WOB\",\"Torque\",\"RPM\",\"Pressure\",\"Flow\",\n",
        "            \"Inclination\",\"Azimuth\",\"Resistivity\",\"Density\",\"Neutron\"]\n",
        "F       = len(FEATURES)\n",
        "SEQ_LEN = 64\n",
        "VAL_DIM = F\n",
        "\n",
        "# === features we use for risk (z-score layer)\n",
        "RISK_FEATURES = [\"Torque\",\"RPM\",\"Pressure\",\"ROP\",\"WOB\"]\n",
        "RISK_IDX = [FEATURES.index(k) for k in RISK_FEATURES]\n",
        "\n",
        "# ---------- Load normalization stats ----------\n",
        "with open(os.path.join(MODEL_DIR, \"norm_stats.json\"), \"r\") as f:\n",
        "    stats_meta = json.load(f)\n",
        "stats = stats_meta[\"stats\"]\n",
        "\n",
        "# ---------- Model defs (must match training) ----------\n",
        "class PositionalEncoding(nn.Module):\n",
        "    def __init__(self, d_model, max_len=8192):\n",
        "        super().__init__()\n",
        "        pe = torch.zeros(max_len, d_model, dtype=torch.float32)\n",
        "        pos = torch.arange(0, max_len, dtype=torch.float32).unsqueeze(1)\n",
        "        div = torch.exp(torch.arange(0, d_model, 2, dtype=torch.float32) * (-math.log(10000.0) / d_model))\n",
        "        pe[:, 0::2] = torch.sin(pos * div)\n",
        "        pe[:, 1::2] = torch.cos(pos * div)\n",
        "        self.register_buffer(\"pe\", pe.unsqueeze(0))\n",
        "    def forward(self, x):\n",
        "        return x + self.pe[:, :x.size(1)]\n",
        "\n",
        "class MaskedAutoencoder(nn.Module):\n",
        "    def __init__(self, in_dim, n_value_feats, d_model=128, depth=4, heads=4, mlp_ratio=2, dropout=0.1):\n",
        "        super().__init__()\n",
        "        self.embed = nn.Linear(in_dim, d_model)\n",
        "        self.pos   = PositionalEncoding(d_model)\n",
        "        enc_layer  = nn.TransformerEncoderLayer(d_model, heads, d_model*mlp_ratio, dropout, batch_first=True)\n",
        "        self.encoder = nn.TransformerEncoder(enc_layer, num_layers=depth)\n",
        "        self.recon_head = nn.Linear(d_model, n_value_feats)\n",
        "        self.md_head    = nn.Linear(d_model, 1)\n",
        "    def forward(self, x, pretrain=False):\n",
        "        h = self.encoder(self.pos(self.embed(x)))\n",
        "        return h if not pretrain else (self.recon_head(h), self.md_head(h))\n",
        "\n",
        "class EncoderWrapper(nn.Module):\n",
        "    def __init__(self, enc):\n",
        "        super().__init__()\n",
        "        self.enc = enc\n",
        "        for p in self.enc.parameters(): p.requires_grad = False\n",
        "    def forward(self, x_seq):  # [B,L,3F]\n",
        "        with torch.no_grad():\n",
        "            h = self.enc(x_seq, pretrain=False)  # [B,L,128]\n",
        "            return h.mean(dim=1)                 # [B,128]\n",
        "\n",
        "class QNet(nn.Module):\n",
        "    def __init__(self, state_dim, n_actions, hidden=256):\n",
        "        super().__init__()\n",
        "        self.net = nn.Sequential(\n",
        "            nn.Linear(state_dim, hidden), nn.ReLU(),\n",
        "            nn.Linear(hidden, hidden), nn.ReLU(),\n",
        "            nn.Linear(hidden, n_actions),\n",
        "        )\n",
        "    def forward(self, s): return self.net(s)\n",
        "\n",
        "class BiLSTMForecast(nn.Module):\n",
        "    def __init__(self, in_dim, hid=256, out_dim=3, depth=2, dropout=0.1):\n",
        "        super().__init__()\n",
        "        self.lstm = nn.LSTM(in_dim, hid//2, num_layers=depth, dropout=dropout,\n",
        "                            batch_first=True, bidirectional=True)\n",
        "        self.head = nn.Sequential(nn.Linear(hid, hid), nn.ReLU(),\n",
        "                                  nn.Linear(hid, out_dim))\n",
        "    def forward(self, x):  # [B,L,2F]\n",
        "        h,_ = self.lstm(x)\n",
        "        return self.head(h[:,-1,:])\n",
        "\n",
        "# ---------- Load models (from MODEL_DIR) ----------\n",
        "encoder = MaskedAutoencoder(in_dim=3*F, n_value_feats=F, d_model=128, depth=4, heads=4).to(device)\n",
        "encoder.load_state_dict(torch.load(os.path.join(MODEL_DIR, \"pretrained_transformer_encoder.pth\"),\n",
        "                                   map_location=device))\n",
        "encoder.eval()\n",
        "enc_frozen = EncoderWrapper(encoder).to(device)\n",
        "print(\"Encoder loaded.\")\n",
        "\n",
        "Q_ACTIONS = np.array([-3,-2,-1,0,+1,+2,+3], dtype=int)\n",
        "qnet = QNet(128, len(Q_ACTIONS)).to(device)\n",
        "qnet.load_state_dict(torch.load(os.path.join(MODEL_DIR, \"dqn_agent_model_offline.pth\"),\n",
        "                                map_location=device))\n",
        "qnet.eval()\n",
        "print(\"DQN loaded.\")\n",
        "\n",
        "bilstm = BiLSTMForecast(in_dim=2*F, hid=256, out_dim=3, depth=2, dropout=0.1).to(device)\n",
        "try:\n",
        "    sd = torch.load(os.path.join(MODEL_DIR, \"bilstm_baseline.pth\"), map_location=device)\n",
        "    if isinstance(sd, dict) and \"state_dict\" in sd: sd = sd[\"state_dict\"]\n",
        "    sd = {k.replace(\"module.\",\"\",1) if k.startswith(\"module.\") else k: v for k,v in sd.items()}\n",
        "    bilstm.load_state_dict(sd, strict=False)\n",
        "    bilstm.eval()\n",
        "    HAS_BILSTM = True\n",
        "    print(\"Bi-LSTM: loaded\")\n",
        "except FileNotFoundError:\n",
        "    HAS_BILSTM = False\n",
        "    print(\"Bi-LSTM: not found (skipping forecasts)\")\n",
        "\n",
        "# ---------- LAS ingestion ----------\n",
        "import lasio\n",
        "import numpy.ma as ma\n",
        "\n",
        "CURVE_ALIASES: Dict[str, str] = {\n",
        "    \"MD\": r\"^(MD|DEPT|DEPTH)$\",\n",
        "    \"GR\": r\"^(GR|GAMMA)$\",\n",
        "    \"Resistivity\": r\"^(RT|RES|ILD|ILM|AT90|AT10|RDEP|RLA\\d+)$\",\n",
        "    \"Density\": r\"^(RHOB|RHOZ|DEN)$\",\n",
        "    \"Neutron\": r\"^(NPHI|NPOR|NEUT)$\",\n",
        "    \"ROP\": r\"^(ROP|R[_\\- ]?OP|RATE[_\\- ]?OF[_\\- ]?PENET.*)$\",\n",
        "    \"WOB\": r\"^(WOB|W[_\\- ]?ON[_\\- ]?BIT|WTBIT)$\",\n",
        "    \"Torque\": r\"^(TORQ|TORQUE)$\",\n",
        "    \"RPM\": r\"^(RPM|REV[_\\- ]?PM)$\",\n",
        "    \"Pressure\": r\"^(PRESS|PRES|SPP)$\",\n",
        "    \"Flow\": r\"^(FLOW|Q[_\\- ]?MUD|QIN)$\",\n",
        "    \"Inclination\": r\"^(INCL|INCLINATION|DIP)$\",\n",
        "    \"Azimuth\": r\"^(AZI|AZIMUTH)$\",\n",
        "    \"TVD\": r\"^(TVD|TVDSS)$\",\n",
        "}\n",
        "\n",
        "def _to_np_array(curve_obj):\n",
        "    data = getattr(curve_obj, \"data\", curve_obj)\n",
        "    data = ma.getdata(data)\n",
        "    arr = np.asarray(data, dtype=np.float64)\n",
        "    arr[~np.isfinite(arr)] = np.nan\n",
        "    return arr\n",
        "\n",
        "def pick_curve(las, target: str):\n",
        "    pat = re.compile(CURVE_ALIASES[target], re.I)\n",
        "    for c in las.curves:\n",
        "        mnem = (c.mnemonic or \"\").strip()\n",
        "        if pat.match(mnem):\n",
        "            try: curve_obj = las.get_curve(mnem)\n",
        "            except Exception: curve_obj = las.curves[mnem]\n",
        "            return _to_np_array(curve_obj)\n",
        "    return None\n",
        "\n",
        "def load_f3_well(las_path: str) -> Tuple[pd.DataFrame, Dict[str,str]]:\n",
        "    las = lasio.read(las_path, ignore_header_errors=True)\n",
        "    found, data = {}, {}\n",
        "    for t in [\"MD\",\"TVD\",\"GR\",\"ROP\",\"WOB\",\"Torque\",\"RPM\",\"Pressure\",\"Flow\",\n",
        "              \"Inclination\",\"Azimuth\",\"Resistivity\",\"Density\",\"Neutron\"]:\n",
        "        v = pick_curve(las, t)\n",
        "        if v is not None:\n",
        "            data[t] = v; found[t] = \"✓\"\n",
        "        else:\n",
        "            found[t] = \"—\"\n",
        "    if \"MD\" not in data:\n",
        "        try:\n",
        "            data[\"MD\"] = _to_np_array(las.index) if hasattr(las, \"index\") else _to_np_array(las.depths)\n",
        "            found[\"MD\"] = \"✓(index)\"\n",
        "        except Exception:\n",
        "            raise RuntimeError(f\"MD not found in {os.path.basename(las_path)}\")\n",
        "\n",
        "    max_len = max(len(v) for v in data.values())\n",
        "    for k, v in list(data.items()):\n",
        "        if len(v) < max_len:\n",
        "            pad = np.full(max_len - len(v), np.nan, dtype=float)\n",
        "            data[k] = np.concatenate([v, pad], axis=0)\n",
        "\n",
        "    df = pd.DataFrame(data)\n",
        "    if \"TVD\" not in df.columns:\n",
        "        df[\"TVD\"] = df[\"MD\"].values\n",
        "    df = df.sort_values(\"MD\").drop_duplicates(subset=[\"MD\"]).reset_index(drop=True)\n",
        "    df[\"__source_file\"] = os.path.basename(las_path)\n",
        "    return df, found\n",
        "\n",
        "# ---------- Normalization ----------\n",
        "def normalize_block(df: pd.DataFrame) -> np.ndarray:\n",
        "    for c in FEATURES:\n",
        "        if c not in df.columns: df[c] = np.nan\n",
        "    vals, masks = [], []\n",
        "    for c in FEATURES:\n",
        "        s   = df[c].astype(\"float32\").values\n",
        "        med = float(stats[c][\"median\"]); iqr = float(max(stats[c][\"iqr\"], 1e-6))\n",
        "        x   = (s - med) / iqr\n",
        "        vals.append(np.nan_to_num(x, nan=0.0, posinf=0.0, neginf=0.0))\n",
        "        masks.append((~np.isnan(s)).astype(\"float32\"))\n",
        "    V = np.clip(np.stack(vals, axis=1), -10.0, 10.0)\n",
        "    M = np.stack(masks, axis=1).astype(\"float32\")\n",
        "    Z = np.zeros_like(V, dtype=np.float32)  # mask-token channel (none at inference)\n",
        "    return np.concatenate([V, M, Z], axis=1)  # [N, 3F]\n",
        "\n",
        "# ---------- Sliding-window utilities ----------\n",
        "class SeqIndex:\n",
        "    def __init__(self, N, L):\n",
        "        self.starts = list(range(0, max(N-L+1, 0)))\n",
        "        self.ends   = [s+L for s in self.starts]\n",
        "    def __len__(self): return len(self.starts)\n",
        "    def slice(self,i): return self.starts[i], self.ends[i]\n",
        "\n",
        "@torch.no_grad()\n",
        "def dqn_actions_for_X3F(X3F: np.ndarray, batch=512) -> Tuple[np.ndarray, np.ndarray]:\n",
        "    idx = SeqIndex(len(X3F), SEQ_LEN)\n",
        "    acts, latents = [], []\n",
        "    for b in range(0, len(idx), batch):\n",
        "        slab = slice(b, min(b+batch, len(idx)))\n",
        "        S,E = idx.starts[slab], idx.ends[slab]\n",
        "        X = np.stack([X3F[s:e] for s,e in zip(S,E)], 0)  # [B,L,3F]\n",
        "        x = torch.tensor(X, dtype=torch.float32, device=device)\n",
        "        z = enc_frozen(x)                 # [B,128]\n",
        "        q = qnet(z)                       # [B,A]\n",
        "        a = q.argmax(1).detach().cpu().numpy()\n",
        "        acts.append(a)\n",
        "        latents.append(z.detach().cpu().numpy())\n",
        "    if not acts: return np.zeros(0, dtype=int), np.zeros((0,128), np.float32)\n",
        "    return np.concatenate(acts,0), np.concatenate(latents,0)\n",
        "\n",
        "@torch.no_grad()\n",
        "def bilstm_multi_forecast_for_X3F(X3F: np.ndarray, batch=512):\n",
        "    if not HAS_BILSTM: return {}\n",
        "    X2F = np.concatenate([X3F[:, :F], X3F[:, F:2*F]], axis=1)\n",
        "    idx = SeqIndex(len(X2F), SEQ_LEN)\n",
        "    outs = {\"GR\": [], \"ROP\": [], \"WOB\": []}\n",
        "    gts  = {\"GR\": [], \"ROP\": [], \"WOB\": []}\n",
        "    i_map = {\"GR\": FEATURES.index(\"GR\"), \"ROP\": FEATURES.index(\"ROP\"), \"WOB\": FEATURES.index(\"WOB\")}\n",
        "    denorm = {k: (float(stats[k][\"median\"]), float(max(stats[k][\"iqr\"], 1e-6))) for k in [\"GR\",\"ROP\",\"WOB\"]}\n",
        "    for b in range(0, len(idx), batch):\n",
        "        slab = slice(b, min(b+batch, len(idx)))\n",
        "        S,E = idx.starts[slab], idx.ends[slab]\n",
        "        X = np.stack([X2F[s:e] for s,e in zip(S,E)], 0)  # [B,L,2F]\n",
        "        x = torch.tensor(X, dtype=torch.float32, device=device)\n",
        "        y = bilstm(x).detach().cpu().numpy()            # [B,3] normalized\n",
        "        for j,(k, jF) in enumerate(i_map.items()):\n",
        "            med, iqr = denorm[k]\n",
        "            pred_norm = y[:, j]\n",
        "            gt_norm   = X[:, -1, :F][:, jF]\n",
        "            outs[k].append(pred_norm * iqr + med)\n",
        "            gts[k].append (gt_norm   * iqr + med)\n",
        "    for k in outs:\n",
        "        outs[k] = np.concatenate(outs[k],0) if len(outs[k]) else np.array([])\n",
        "        gts[k]  = np.concatenate(gts[k],0)  if len(gts[k])  else np.array([])\n",
        "    return {\"pred\": outs, \"true\": gts}\n",
        "\n",
        "# Persistence baseline for Torque/Pressure\n",
        "def persistence_forecast_for_X3F(X3F: np.ndarray, feature_name: str):\n",
        "    j = FEATURES.index(feature_name)\n",
        "    idx = SeqIndex(len(X3F), SEQ_LEN)\n",
        "    med = float(stats[feature_name][\"median\"]); iqr = float(max(stats[feature_name][\"iqr\"], 1e-6))\n",
        "    y_true, y_pred = [], []\n",
        "    for i in range(len(idx)):\n",
        "        s,e = idx.slice(i)\n",
        "        last_norm = X3F[e-1, j]\n",
        "        phys = last_norm * iqr + med\n",
        "        y_true.append(phys)\n",
        "        y_pred.append(phys)      # persistence\n",
        "    return np.array(y_pred), np.array(y_true)\n",
        "\n",
        "# ---------- Contact-state logic ----------\n",
        "def contact_states(gr_phys: np.ndarray, gr_pred_next: np.ndarray | None,\n",
        "                   target: float = 60.0, band: float = 15.0,\n",
        "                   smooth_win: int = 11):\n",
        "    gr_s = pd.Series(gr_phys).rolling(smooth_win, center=True, min_periods=1).median().values\n",
        "    d = gr_s - target\n",
        "    status = np.full(len(gr_s), \"outside\", dtype=object)\n",
        "    inside = np.abs(d) <= band\n",
        "    status[inside] = \"in_zone\"\n",
        "    grad = np.gradient(d)\n",
        "    trend = grad.copy()\n",
        "    if gr_pred_next is not None:\n",
        "        f_ok = np.isfinite(gr_pred_next)\n",
        "        delta_f = np.zeros_like(gr_s)\n",
        "        delta_f[f_ok] = gr_pred_next[f_ok] - gr_s[f_ok]\n",
        "        trend = 0.7 * grad + 0.3 * delta_f\n",
        "    approaching = inside & (d * trend > 0)\n",
        "    status[approaching] = \"approaching_exit\"\n",
        "    exiting = (~inside) & (d * trend > 0)\n",
        "    status[exiting] = \"exiting\"\n",
        "    breakdown = {k: int(np.sum(status == k)) for k in [\"outside\",\"in_zone\",\"approaching_exit\",\"exiting\"]}\n",
        "    return status, breakdown\n",
        "\n",
        "# Lightweight risk score (0-100)\n",
        "def compute_risk_scores(X3F: np.ndarray,\n",
        "                        ytrue_gr: np.ndarray,\n",
        "                        yhat_gr: np.ndarray,\n",
        "                        gr_target: float = 60.0,\n",
        "                        gr_band: float   = 15.0):\n",
        "    idx = SeqIndex(len(X3F), SEQ_LEN)\n",
        "    iqr_gr = float(max(stats[\"GR\"][\"iqr\"], 1e-6))\n",
        "    risks, sevs, top_feats = [], [], []\n",
        "    for i in range(len(idx)):\n",
        "        s,e = idx.slice(i)\n",
        "        Vend = X3F[e-1, :F]\n",
        "        z_abs = np.abs(Vend[RISK_IDX])\n",
        "        z_agg = float(np.mean(np.clip(z_abs, 0, 6)))\n",
        "        order = np.argsort(-z_abs)[:3]\n",
        "        top = [f\"{RISK_FEATURES[k]}:{z_abs[k]:.1f}σ\" for k in order]\n",
        "        top_feats.append(top)\n",
        "        fe = float(abs(yhat_gr[i] - ytrue_gr[i]) / iqr_gr); fe = min(fe, 6.0)\n",
        "        d = abs(ytrue_gr[i] - gr_target) - gr_band\n",
        "        prox = max(d, 0.0) / max(gr_band, 1e-6); prox = min(prox, 3.0)\n",
        "        linear = 0.6*z_agg + 0.5*fe + 0.8*prox\n",
        "        risk = 100.0 * math.tanh(linear / 3.0)\n",
        "        risks.append(risk)\n",
        "        if   risk >= 85: sevs.append(\"critical\")\n",
        "        elif risk >= 70: sevs.append(\"warning\")\n",
        "        elif risk >= 50: sevs.append(\"info\")\n",
        "        else:            sevs.append(\"normal\")\n",
        "    return np.array(risks), np.array(sevs, dtype=object), top_feats\n",
        "\n",
        "# ---------- Plotting ----------\n",
        "Q_ACTIONS = np.array([-3,-2,-1,0,+1,+2,+3], dtype=int)\n",
        "\n",
        "def plot_dashboard(\n",
        "    well_name, md, gr_phys, gr_pred_next=None, actions_idx=None,\n",
        "    target=60.0, band=15.0, show_samples='all', save_png_path=None,\n",
        "    plan_md=None, delta_md=None\n",
        "):\n",
        "    Nw = len(gr_phys)\n",
        "    K = Nw if (show_samples in ['all', None]) else max(1, min(int(show_samples), Nw))\n",
        "    xs = np.arange(Nw)\n",
        "    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6), sharex=True, gridspec_kw={\"height_ratios\": [3, 1]})\n",
        "    ax1.plot(xs[:K], gr_phys[:K], label=\"GR (gAPI)\")\n",
        "    if gr_pred_next is not None and np.isfinite(gr_pred_next[:K]).any():\n",
        "        ax1.plot(xs[:K], gr_pred_next[:K], \"--\", label=\"GR next-step pred\")\n",
        "    ax1.axhline(target, ls=\"--\", label=\"GR target\")\n",
        "    ax1.axhspan(target - band, target + band, alpha=0.2, label=\"target band\")\n",
        "    ax1.set_ylabel(\"gAPI\")\n",
        "    ttl = f\"{well_name} · first {K} samples\"\n",
        "    if delta_md is not None and len(delta_md) >= K:\n",
        "        last_delta = float(delta_md[min(K-1, len(delta_md)-1)])\n",
        "        ttl += f\" · ΔMD vs plan (last) = {last_delta:+.1f} m\"\n",
        "    ax1.set_title(ttl); ax1.legend(loc=\"upper right\")\n",
        "    if actions_idx is not None and len(actions_idx):\n",
        "        deltas = Q_ACTIONS[np.asarray(actions_idx[:K]).astype(int)]\n",
        "    else:\n",
        "        deltas = np.zeros(K, dtype=float)\n",
        "    ax2.plot(xs[:K], deltas, linewidth=0.8)\n",
        "    ax2.plot(xs[:K], deltas, linestyle=\"None\", marker=\"o\", markersize=2, alpha=0.6)\n",
        "    ax2.axhline(0.0, color=\"k\", linewidth=0.5)\n",
        "    ax2.set_ylabel(\"Δ inc (deg)\"); ax2.set_xlabel(\"sample idx\")\n",
        "    plt.tight_layout()\n",
        "    if save_png_path: plt.savefig(save_png_path, dpi=150)\n",
        "    plt.show()\n",
        "\n",
        "# ---------- Helpers for JSON ----------\n",
        "def _to_py_list(x):\n",
        "    if isinstance(x, np.ndarray): return x.tolist()\n",
        "    if isinstance(x, (list, tuple)): return list(x)\n",
        "    return x\n",
        "\n",
        "def _write_json(path, payload):\n",
        "    with open(path, \"w\") as f:\n",
        "        json.dump(payload, f, indent=2)\n",
        "\n",
        "# ---------- End-to-end per well (writes JSON) ----------\n",
        "def process_well(las_path: str,\n",
        "                 GR_TARGET=60.0, GR_BAND=15.0,\n",
        "                 show_samples=1000, save_png=True, save_csv=True,\n",
        "                 plan_md_by_window: Optional[np.ndarray] = None,\n",
        "                 print_predictions: bool = True,\n",
        "                 print_limit: Optional[int] = None,\n",
        "                 save_json: bool = True):\n",
        "    df, found = load_f3_well(las_path)\n",
        "    print(f\"\\nLoaded {os.path.basename(las_path)} | mapped: {found}\")\n",
        "    if \"GR\" not in df.columns:\n",
        "        print(\"No GR curve → skipping.\")\n",
        "        return None\n",
        "\n",
        "    X3F = normalize_block(df)\n",
        "    a_idx, lat = dqn_actions_for_X3F(X3F)\n",
        "    multi = bilstm_multi_forecast_for_X3F(X3F)\n",
        "    yhat_tq, ytru_tq = persistence_forecast_for_X3F(X3F, \"Torque\")\n",
        "    yhat_pp, ytru_pp = persistence_forecast_for_X3F(X3F, \"Pressure\")\n",
        "\n",
        "    if not multi:\n",
        "        print(\"No Bi-LSTM — using persistence only for Torque/Pressure. Skipping GR-based metrics.\")\n",
        "        return None\n",
        "\n",
        "    yhat_gr = multi[\"pred\"][\"GR\"];  ytru_gr = multi[\"true\"][\"GR\"]\n",
        "    yhat_rop= multi[\"pred\"][\"ROP\"]; ytru_rop= multi[\"true\"][\"ROP\"]\n",
        "    yhat_wob= multi[\"pred\"][\"WOB\"]; ytru_wob= multi[\"true\"][\"WOB\"]\n",
        "\n",
        "    Nw = yhat_gr.shape[0]\n",
        "    md_end = df[\"MD\"].values[SEQ_LEN-1 : SEQ_LEN-1 + Nw]\n",
        "    well = os.path.basename(las_path)\n",
        "    src  = df[\"__source_file\"].iloc[0] if \"__source_file\" in df.columns else os.path.basename(las_path)\n",
        "\n",
        "    states, breakdown = contact_states(ytru_gr, yhat_gr, target=GR_TARGET, band=GR_BAND)\n",
        "    in_contact = (states == \"in_zone\")\n",
        "    contact_pct_cum = 100.0 * np.cumsum(in_contact.astype(float)) / (np.arange(Nw) + 1)\n",
        "    risks, sevs, top_feats = compute_risk_scores(X3F, ytru_gr, yhat_gr, gr_target=GR_TARGET, gr_band=GR_BAND)\n",
        "\n",
        "    if plan_md_by_window is not None and len(plan_md_by_window) >= Nw:\n",
        "        delta_md = md_end - plan_md_by_window[:Nw]; plan_used = True\n",
        "    else:\n",
        "        delta_md = np.full(Nw, np.nan);               plan_used = False\n",
        "\n",
        "    # CSV (optional)\n",
        "    csv_path = \"\"\n",
        "    if save_csv:\n",
        "        out_rows = pd.DataFrame({\n",
        "            \"well\": well,\n",
        "            \"window_idx\": np.arange(Nw),\n",
        "            \"MD_end\": md_end,\n",
        "            \"GR_true\": ytru_gr, \"GR_pred_next\": yhat_gr,\n",
        "            \"ROP_true\": ytru_rop, \"ROP_pred_next\": yhat_rop,\n",
        "            \"WOB_true\": ytru_wob, \"WOB_pred_next\": yhat_wob,\n",
        "            \"Torque_true\": ytru_tq[:Nw], \"Torque_pred_next\": yhat_tq[:Nw],\n",
        "            \"Pressure_true\": ytru_pp[:Nw], \"Pressure_pred_next\": yhat_pp[:Nw],\n",
        "            \"action_idx\": a_idx[:Nw] if a_idx.size else np.full(Nw, -1),\n",
        "            \"delta_deg\": Q_ACTIONS[a_idx[:Nw]] if a_idx.size else np.full(Nw, np.nan),\n",
        "            \"state\": states,\n",
        "            \"contact_pct_cum\": contact_pct_cum,\n",
        "            \"risk\": risks,\n",
        "            \"severity\": sevs,\n",
        "            \"top_signals\": [\", \".join(t) for t in top_feats],\n",
        "            \"plan_MD_end\": plan_md_by_window[:Nw] if plan_used else np.full(Nw, np.nan),\n",
        "            \"delta_MD_vs_plan\": delta_md\n",
        "        })\n",
        "        csv_path = os.path.join(SAVE_DIR, f\"f3_contact_{well.replace('.las','')}.csv\")\n",
        "        out_rows.to_csv(csv_path, index=False)\n",
        "        print(f\"📄 wrote per-window CSV → {csv_path}\")\n",
        "\n",
        "    # Plot (optional)\n",
        "    plot_png = \"\"\n",
        "    if save_png:\n",
        "        fig_path = os.path.join(SAVE_DIR, f\"f3_dashboard_{well.replace('.las','')}.png\")\n",
        "        plot_dashboard(\n",
        "            well, df[\"MD\"].values, ytru_gr, yhat_gr, a_idx,\n",
        "            target=GR_TARGET, band=GR_BAND, show_samples=show_samples,\n",
        "            save_png_path=fig_path,\n",
        "            plan_md=plan_md_by_window[:Nw] if plan_used else None,\n",
        "            delta_md=delta_md if plan_used else None\n",
        "        )\n",
        "        plot_png = fig_path\n",
        "\n",
        "    # Build JSON payload\n",
        "    summary = {\n",
        "        \"risk_p50\": float(np.nanpercentile(risks, 50)),\n",
        "        \"risk_p90\": float(np.nanpercentile(risks, 90)),\n",
        "        \"contact_final_pct\": float(contact_pct_cum[-1]),\n",
        "        \"breakdown\": {k:int(v) for k,v in breakdown.items()},\n",
        "        \"n_windows\": int(Nw),\n",
        "        \"plan_overlay\": bool(plan_used)\n",
        "    }\n",
        "    payload = {\n",
        "        \"meta\": {\n",
        "            \"well_name\": well,\n",
        "            \"source_file\": src,\n",
        "            \"generated_at_utc\": datetime.datetime.utcnow().isoformat() + \"Z\"\n",
        "        },\n",
        "        \"config\": {\n",
        "            \"seq_len\": SEQ_LEN,\n",
        "            \"features\": FEATURES,\n",
        "            \"gr_target\": float(GR_TARGET),\n",
        "            \"gr_band\": float(GR_BAND)\n",
        "        },\n",
        "        \"summary\": summary,\n",
        "        \"timeseries\": {\n",
        "            \"window_idx\": _to_py_list(np.arange(Nw)),\n",
        "            \"MD_end\": _to_py_list(md_end),\n",
        "            \"forecasts\": {\n",
        "                \"GR\": {\"true\": _to_py_list(ytru_gr), \"pred_next\": _to_py_list(yhat_gr)},\n",
        "                \"ROP\":{\"true\": _to_py_list(ytru_rop), \"pred_next\": _to_py_list(yhat_rop)},\n",
        "                \"WOB\":{\"true\": _to_py_list(ytru_wob), \"pred_next\": _to_py_list(yhat_wob)},\n",
        "                \"Torque\":{\"true\": _to_py_list(ytru_tq[:Nw]), \"pred_next\": _to_py_list(yhat_tq[:Nw])},\n",
        "                \"Pressure\":{\"true\": _to_py_list(ytru_pp[:Nw]), \"pred_next\": _to_py_list(yhat_pp[:Nw])}\n",
        "            },\n",
        "            \"actions\": {\n",
        "                \"action_idx\": _to_py_list(a_idx[:Nw] if a_idx.size else np.full(Nw, -1)),\n",
        "                \"delta_deg\": _to_py_list(Q_ACTIONS[a_idx[:Nw]] if a_idx.size else np.full(Nw, np.nan))\n",
        "            },\n",
        "            \"reservoir\": {\n",
        "                \"state\": _to_py_list(states),\n",
        "                \"contact_pct_cum\": _to_py_list(contact_pct_cum)\n",
        "            },\n",
        "            \"risk\": {\n",
        "                \"risk\": _to_py_list(risks),\n",
        "                \"severity\": _to_py_list(sevs),\n",
        "                \"top_signals\": _to_py_list([\", \".join(t) for t in top_feats])\n",
        "            },\n",
        "            \"performance\": {\n",
        "                \"plan_MD_end\": _to_py_list(plan_md_by_window[:Nw] if plan_used else np.full(Nw, np.nan)),\n",
        "                \"delta_MD_vs_plan\": _to_py_list(delta_md)\n",
        "            }\n",
        "        },\n",
        "        \"artifacts\": {\n",
        "            \"csv_path\": csv_path,\n",
        "            \"plot_png\": plot_png\n",
        "        }\n",
        "    }\n",
        "\n",
        "    json_path = \"\"\n",
        "    if save_json:\n",
        "        json_path = os.path.join(SAVE_DIR, f\"f3_json_{well.replace('.las','')}.json\")\n",
        "        _write_json(json_path, payload)\n",
        "        print(f\"🧾 wrote per-well JSON → {json_path}\")\n",
        "\n",
        "    print(f\"Risk (p50/p90): {summary['risk_p50']:.1f} / {summary['risk_p90']:.1f} · \"\n",
        "          f\"Contact % (final): {summary['contact_final_pct']:.1f}% · \"\n",
        "          f\"Plan overlay: {'yes' if summary['plan_overlay'] else 'no'}\")\n",
        "\n",
        "    return {\"breakdown\": breakdown, \"json_path\": json_path, \"summary\": summary, \"well\": well}\n",
        "\n",
        "# ---------- Optional contact plot ----------\n",
        "def plot_contact_windows(rep_df, well_name, GR_TARGET=60.0, GR_BAND=15.0, show_samples='all'):\n",
        "    if show_samples == 'all' or show_samples is None:\n",
        "        show_n = len(rep_df)\n",
        "    else:\n",
        "        show_n = min(int(show_samples), len(rep_df))\n",
        "    view = rep_df.iloc[:show_n].copy()\n",
        "    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6), sharex=True, gridspec_kw={\"height_ratios\":[3,1]})\n",
        "    ax1.plot(view[\"idx\"].values, view[\"GR_true\"].values, label=\"GR (gAPI)\")\n",
        "    if \"GR_pred_next\" in view.columns and np.isfinite(view[\"GR_pred_next\"]).any():\n",
        "        ax1.plot(view[\"idx\"].values, view[\"GR_pred_next\"].values, \"--\", label=\"GR next-step pred\")\n",
        "    ax1.axhline(GR_TARGET, ls=\"--\", label=\"GR target\")\n",
        "    ax1.axhspan(GR_TARGET-GR_BAND, GR_TARGET+GR_BAND, alpha=0.2, label=\"target band\")\n",
        "    for i, st in enumerate(view[\"status\"].values):\n",
        "        if st == \"in_zone\":            ax1.axvspan(i-0.5, i+0.5, color=(0.2,0.6,0.9,0.10))\n",
        "        elif st == \"approaching_exit\": ax1.axvspan(i-0.5, i+0.5, color=(1.0,0.5,0.0,0.10))\n",
        "        elif st == \"exiting\":          ax1.axvspan(i-0.5, i+0.5, color=(1.0,0.0,0.0,0.12))\n",
        "    ax1.set_ylabel(\"gAPI\"); ax1.set_title(f\"Reservoir-contact states (first {show_n} samples): {well_name}\")\n",
        "    ax1.legend(loc=\"upper right\")\n",
        "    deltas = view[\"delta_deg\"].values if \"delta_deg\" in view.columns else np.zeros(len(view))\n",
        "    xs = view[\"idx\"].values\n",
        "    ax2.plot(xs, deltas, linewidth=0.8)\n",
        "    ax2.plot(xs, deltas, linestyle=\"None\", marker=\"o\", markersize=2, alpha=0.5)\n",
        "    ax2.axhline(0.0, color=\"k\", linewidth=0.5)\n",
        "    ax2.set_ylabel(\"Δ inc (deg)\"); ax2.set_xlabel(\"sample idx\")\n",
        "    plt.tight_layout(); plt.show()\n",
        "\n",
        "# ---------- Run on user-provided LAS files & build index ----------\n",
        "las_files = get_las_paths_from_user()\n",
        "if not las_files:\n",
        "    raise RuntimeError(\"No .las files provided. Please select or specify at least one .las file.\")\n",
        "\n",
        "overall = {\"outside\":0, \"in_zone\":0, \"approaching_exit\":0, \"exiting\":0}\n",
        "index_items = []\n",
        "\n",
        "for lp in las_files:\n",
        "    res = process_well(lp, GR_TARGET=60.0, GR_BAND=15.0,\n",
        "                       show_samples='all', save_png=True, save_csv=True,\n",
        "                       plan_md_by_window=None, save_json=True)\n",
        "    if not res:\n",
        "        continue\n",
        "    bd = res[\"breakdown\"]\n",
        "    for k in overall: overall[k] += int(bd.get(k, 0))\n",
        "    index_items.append({\n",
        "        \"well\": res[\"well\"],\n",
        "        \"json_path\": res[\"json_path\"],\n",
        "        \"summary\": res[\"summary\"]\n",
        "    })\n",
        "\n",
        "index_payload = {\n",
        "    \"generated_at_utc\": datetime.datetime.utcnow().isoformat() + \"Z\",\n",
        "    \"n_wells\": len(index_items),\n",
        "    \"aggregate_state_counts\": overall,\n",
        "    \"wells\": index_items\n",
        "}\n",
        "index_path = os.path.join(SAVE_DIR, \"f3_all_outputs.json\")\n",
        "with open(index_path, \"w\") as f:\n",
        "    json.dump(index_payload, f, indent=2)\n",
        "\n",
        "print(\"\\n=== Aggregate across uploaded wells (window-level) ===\")\n",
        "print(overall)\n",
        "print(f\"🗂️  wrote index JSON → {index_path}\")\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "machine_shape": "hm",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "base",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
